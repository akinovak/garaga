from hydra.definitions import CurveID
from hydra.hints.tower_backup import E12

# Bls12-381

"""
The goal of this script is to provide aux witness for efficient proving that Miller loop outputs of BLS12-381 curve are λ residues. 
Co-factor h = 27 * p * h1 and λ = r * 3 * p^2. 
We know that when pairings are equal multi Miller loop output is always r-th residue, 
but it is λ residue only when it is a cube and p-th residue too. 
This happens with a very small probability (1/3*p), but both 27th and p-th roots of unity are in the subfields of Fp12, Fp3 and Fp respectively. 
Thus we can simply clear their contribution and not affect he soundness of the method. 

Note that gcd(27*p, h1) = 1, therefore we do the following: 

i := inverse_mod(h1, 27*p)
s := -i % 27*p

Then given the Miller loop output x, computing w = (x^h1)^s gives exactly the inverse of 27*p-th root of unity contribution in x. 
By computing x_sh = w * x we are left with an element that is of order exactly h1. 

Since gcd(h1, λ) = 1 computing λ root of x_sh can be simply done by just raising x_sh^e where e = inverse_mod(h1, λ)
"""

h = 322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560
lam = 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129030796414117214202539
h1 = 2366356426548243601069753987687709088104621721678962410379583120840019275952471579477684846670499039076873213559162845121989217658133790336552276567078487633052653005423051750848782286407340332979263075575489766963251914185767058009683318020965829271737924625612375201545022326908440428522712877494557944965298566001441468676802477524234094954960009227631543471415676620753242466901942121887152806837594306028649150255258504417829961387165043999299071444887652375514277477719817175923289019181393803729926249507024121957184340179467502106891835144220611408665090353102353194448552304429530104218473070114105759487413726485729058069746063140422361472585604626055492939586602274983146215294625774144156395553405525711143696689756441298365274341189385646499074862712688473936093315628166094221735056483459332831845007196600723053356837526749543765815988577005929923802636375670820616189737737304893769679803809426304143627363860243558537831172903494450556755190448279875942974830469855835666815454271389438587399739607656399812689280234103023464545891697941661992848552456326290792224091557256350095392859243101357349751064730561345062266850238821755009430903520645523345000326783803935359711318798844368754833295302563158150573540616830138810935344206231367357992991289265295323280
s = 13871344871029839191
e = 1831641335620623066030493719814750505730353469232607408984136636587602798828541096315617787337660580896596326998534644457004429745922908233143891672764988414950129738729858091158205555565902620547217447631024516567208419316911441452506166124582175761417927641295939217754840037829611255709087158279242957940625143296408819749143295856831426628369017685600998542951914342403397019136966636888082401920580506454124412301032882712464981559302655280563177865634616387141297622595244784621594534214052542425250197179149807006335538265574872503469097186776521644002111433399650909641885318866460936246236243529502790661531948114436384119347931262823673992912046778604767497085407555474313407712735307333317882930639512124999103536572343436126871997578016786488693723339409687453114134784227807901874533332546112824417573327256689835936839706774393384112352709458439683933327013619962098977697684860933918339286553214389828566701676847442687594385334748280300467909322727863382808795828794016038705718095323209413819963715797469895587732751744906760424173767179546312457734136109353976884272162867417651164377486191418315758965239169722140695318540646880198727657740603762882647173358897627586506579349681824692808439213054305286657596509971558805903962977863660242510377179301897268259

ONE = E12.one(curve_id=1)

def is_rth_residue(x):
    return x**h == ONE 

def get_aux_witness(mlo, check_residue = False):
    if check_residue: 
        if not is_rth_residue(mlo): 
            raise Exception("Miller loop output is not r-th residue") 

    x = mlo**h1 
    shift = x**s 
    return shift, (shift * mlo)**e


if __name__ == "__main__":
    import random

    from hydra.hints.multi_miller_witness import get_miller_loop_output

    random.seed(0)
    for i in range(5):
        # Test a correct case where final_exp(miller loop output) == 1
        f = get_miller_loop_output(curve_id=CurveID.BLS12_381, will_be_one=True)
        shift, root = get_aux_witness(f)
        assert is_rth_residue(f) == True, f"f^h!=1"
        assert f * shift == root**lam, f"f * shift!= root**lam"

        # Test a wrong case where final_exp(miller loop output) != 1
        f = get_miller_loop_output(curve_id=CurveID.BLS12_381, will_be_one=False)
        shift, root = get_aux_witness(f)
        assert f**h != ONE, f"f^h==1"
        assert f * shift != root**lam, f"f * shift == root**lam although f^h!=1"

        print(f"{i}-th check ok")
